// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//@id defines unique id 

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  createdAt  DateTime    @default(now())
  type       Type
  property   Property
  user       User        @relation(fields: [userID], references: [id])
  userID     String      @db.ObjectId
  postDetail PostDetail?
  savedPost  SavedPost[]
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model PostDetail {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  desc         String
  utilities    String?
  petPolicy    String?
  propertyFees String?
  size         Int?
  school       Int?
  bus          Int?
  restaurant   Int?
  post         Post    @relation(fields: [postID], references: [id])
  postID       String  @unique @db.ObjectId
}

model User {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId //connects mongodb _id to id using map
  email     String      @unique
  username  String      @unique
  password  String
  profile   String? //maybe empty
  createdAt DateTime    @default(now())
  posts     Post[]
  savedPost SavedPost[]
  chatIDs   String[]    @db.ObjectId
  chats     Chat[]      @relation(fields: [chatIDs], references: [id])
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId //connects mongodb _id to id using map
  post      Post     @relation(fields: [postID], references: [id])
  postID    String   @unique @db.ObjectId
  user      User     @relation(fields: [userID], references: [id])
  userID    String   @unique @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userID, postID]) //cannot save same post again and again by same user
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId //connects mongodb _id to id using map
  createdAt DateTime  @default(now())
  userIDs   String[]  @db.ObjectId
  users     User[]    @relation(fields: [userIDs], references: [id])
  seenBy    String[]  @db.ObjectId
  messages  Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId //connects mongodb _id to id using map
  createdAt DateTime @default(now())
  text      String
  userID    String
  chat      Chat     @relation(fields: [chatID], references: [id])
  chatID    String   @db.ObjectId
}
